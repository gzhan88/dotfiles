[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
hook_source = '''
  let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_ignore_case = 1
  let g:neocomplete#enable_smart_case = 1
  if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
  endif
  let g:neocomplete#keyword_patterns._ = '\h\w*'
  inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
  hi Pmenu ctermbg=4
  hi PmenuSel ctermbg=1
  hi PMenuSbar ctermbg=4
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
hook_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-l> <Plug>(neosnippet_expand_target)
  snoremap <CR> <BS>i
  "SuperTab like snippets behavior.
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"
    
  "For snippet_complete marker.
  if has('conceal')
  set conceallevel=2 concealcursor=i
  endif
  let g:neosnippet#snippets_directory='~/.vim/mysnippet' 
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'h1mesuke/vim-alignta'
on_i = 1

[[plugins]]
repo   = 'Shougo/unite.vim'

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['unite.vim']

